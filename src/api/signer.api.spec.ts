import * as httpAgent from '@dfinity/agent';
import {Ed25519KeyIdentity} from '@dfinity/identity';
import {arrayBufferToUint8Array} from '@dfinity/utils';
import {encode} from '../agent/agentjs-cbor-copy';
import {mockRepliedLocalCertificate} from '../mocks/custom-http-agent-responses.mocks';
import {mockRequestDetails, mockRequestPayload} from '../mocks/custom-http-agent.mocks';
import type {SignerOptions} from '../types/signer-options';
import {uint8ArrayToBase64} from '../utils/base64.utils';
import {SignerApi} from './signer.api';

vi.mock('../agent/custom-http-agent', async (importOriginal) => {
  const mockCustomAgent = {
    get agent() {
      return {};
    },

    request: vi.fn(() => ({
      certificate: httpAgent.fromHex(mockRepliedLocalCertificate),
      requestDetails: mockRequestDetails
    }))
  };

  return {
    // eslint-disable-next-line @typescript-eslint/consistent-type-imports
    ...(await importOriginal<typeof import('../agent/custom-http-agent')>()),
    CustomHttpAgent: {
      create: vi.fn().mockResolvedValue(mockCustomAgent)
    }
  };
});

describe('Signer-api', () => {
  const identity = Ed25519KeyIdentity.generate();

  const signerOptions: SignerOptions = {
    owner: identity,
    host: 'http://localhost:8080'
  };

  let signerApi: SignerApi;

  beforeEach(() => {
    signerApi = new SignerApi();
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  it('should call request and return the properly encoded result', async () => {
    const result = await signerApi.call({
      params: {
        ...mockRequestPayload,
        sender: identity.getPrincipal().toText()
      },
      ...signerOptions
    });

    // We need to generate an expected value because the encoding (encode) seems to produce dynamic values.
    // I'm not sure which part is dynamic, and there doesn't appear to be a specific test we can copy from agent-js.
    // TODO: It would be better to test against a static value.
    const encodedContentMap = uint8ArrayToBase64(
      arrayBufferToUint8Array(encode(mockRequestDetails))
    );

    expect(result).toEqual({
      // The mock values were generated by the test based on the certificate and request details. We assume that at the time of creating this test, these values were entirely accurate.
      certificate: '2dn39w==',
      contentMap: encodedContentMap
    });
  });
});
