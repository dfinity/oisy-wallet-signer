/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.2.0-patch-typed-arrays.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

export const idlFactory = ({IDL}) => {
  const Account = IDL.Record({
    owner: IDL.Principal,
    subaccount: IDL.Opt(IDL.Vec(IDL.Nat8))
  });
  const AllowanceArgs = IDL.Record({
    account: Account,
    spender: Account
  });
  const ApproveArgs = IDL.Record({
    fee: IDL.Opt(IDL.Nat),
    memo: IDL.Opt(IDL.Vec(IDL.Nat8)),
    from_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),
    created_at_time: IDL.Opt(IDL.Nat64),
    amount: IDL.Nat,
    expected_allowance: IDL.Opt(IDL.Nat),
    expires_at: IDL.Opt(IDL.Nat64),
    spender: Account
  });
  const ApproveError = IDL.Variant({
    GenericError: IDL.Record({
      message: IDL.Text,
      error_code: IDL.Nat
    }),
    TemporarilyUnavailable: IDL.Null,
    Duplicate: IDL.Record({duplicate_of: IDL.Nat}),
    BadFee: IDL.Record({expected_fee: IDL.Nat}),
    AllowanceChanged: IDL.Record({current_allowance: IDL.Nat}),
    CreatedInFuture: IDL.Record({ledger_time: IDL.Nat64}),
    TooOld: IDL.Null,
    Expired: IDL.Record({ledger_time: IDL.Nat64}),
    InsufficientFunds: IDL.Record({balance: IDL.Nat})
  });
  const TransferFromArgs = IDL.Record({
    to: Account,
    fee: IDL.Opt(IDL.Nat),
    spender_subaccount: IDL.Opt(IDL.Vec(IDL.Nat8)),
    from: Account,
    memo: IDL.Opt(IDL.Vec(IDL.Nat8)),
    created_at_time: IDL.Opt(IDL.Nat64),
    amount: IDL.Nat
  });
  const TransferFromError = IDL.Variant({
    GenericError: IDL.Record({
      message: IDL.Text,
      error_code: IDL.Nat
    }),
    TemporarilyUnavailable: IDL.Null,
    InsufficientAllowance: IDL.Record({allowance: IDL.Nat}),
    BadBurn: IDL.Record({min_burn_amount: IDL.Nat}),
    Duplicate: IDL.Record({duplicate_of: IDL.Nat}),
    BadFee: IDL.Record({expected_fee: IDL.Nat}),
    CreatedInFuture: IDL.Record({ledger_time: IDL.Nat64}),
    TooOld: IDL.Null,
    InsufficientFunds: IDL.Record({balance: IDL.Nat})
  });

  return IDL.Service({
    icrc1_supported_standards: IDL.Func(
      [],
      [IDL.Vec(IDL.Record({url: IDL.Text, name: IDL.Text}))],
      ['query']
    ),
    icrc2_allowance: IDL.Func(
      [AllowanceArgs],
      [
        IDL.Record({
          allowance: IDL.Nat,
          expires_at: IDL.Opt(IDL.Nat64)
        })
      ],
      ['query']
    ),
    icrc2_approve: IDL.Func([ApproveArgs], [IDL.Variant({Ok: IDL.Nat, Err: ApproveError})], []),
    icrc2_transfer_from: IDL.Func(
      [TransferFromArgs],
      [IDL.Variant({Ok: IDL.Nat, Err: TransferFromError})],
      []
    )
  });
};

export const init = ({IDL}) => {
  return [];
};
